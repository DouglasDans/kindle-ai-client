### 📌 Overview

# 📄 project-rules.md

## Project: Kindle AI Client

---

## 🎯 Overview

This project is a **minimalist AI client**, specifically designed to run on the Kindle's limited browser.
The goal is to provide a simple, fast, and lightweight way for a user to submit a question and receive an answer from a language model (e.g., OpenAI), without any visual or technical overhead.

---

## 🚀 Core Features

### 1. Home Page (`/`)

*   Displays a form with:
    *   `textarea` for the user to type their question (prompt).
    *   `button` to submit the form.
*   The form uses `method="POST"` and `action="/response"`.
*   No mandatory JavaScript; navigation works with pure HTML only.

### 2. Response Page (`/response`)

*   Receives the user's prompt via `POST`.
*   Sanitizes and validates the input.
*   Sends the prompt to the backend, which queries the AI model.
*   Renders an HTML page with:
    *   The original prompt sent by the user.
    *   The response generated by the AI.
    *   A clear link to return to the home page and ask another question.

---

## 🔒 Business Rules

*   Each request is **independent**: there is no context or conversation history.
*   There is no form of login, registration, or persistent session.
*   No personal user data is stored.
*   The flow is always:
    ```
    [Home -> Form -> POST -> /response -> HTML Response -> "Go back" link]
    ```
*   All prompt processing and response generation is done **exclusively on the server**.
*   The interface does not store or display past conversations.

---

## 🚦 Technical Constraints

### Compatibility

*   The site must work perfectly on the Kindle browser, which has limited support for HTML and CSS.
*   Do not use:
    *   Front-end frameworks (React, Vue, Angular, etc.).
    *   Bundlers like Webpack or Vite on the client.
    *   Shadow DOM or Web Components.
    *   External assets (like heavy fonts or images).
*   The HTML must be valid, simple, and have a total fallback if CSS or JS fail to load.

### Backend

*   Responsible for:
    *   Receiving the prompt.
    *   Calling the language model (via OpenAI API or another provider).
    *   Returning the final HTML with the rendered response.
*   Use Node.js with Express (or Fastify) for maximum lightness and control.
*   Optional template engine (EJS, Pug, or HTML string literals).
*   Implement:
    *   Input data sanitization to prevent XSS.
    *   Configurable timeout for AI calls, returning a friendly message if exceeded.
    *   Compression (`gzip`) and appropriate headers (`Cache-Control`, `Content-Security-Policy`).

### Frontend

*   100% Server-Side Rendering (SSR).
*   No mandatory JS dependencies.
*   Optional CSS should be embedded in the HTML itself (inline style or internal `<style>`), to reduce HTTP requests.

---

## ⚖️ Additional Rules and Operational Limits

*   The user's prompt field will have a maximum limit of **500 characters**.
*   The maximum response time for the AI model will be **10 seconds**.
*   If the AI does not respond within the expected time, the user will see a friendly error page with a suggestion to try again.
*   All generated texts must be properly escaped to avoid any rendering or security issues in the HTML.

---

## 🔐 Security and Privacy

*   No personal data or IP will be stored for tracking.
*   Server logs should only contain errors and minimal metrics for troubleshooting, never full prompts or responses.
*   The service will be stateless and without cookies or sessions.

---

## 🔍 Future Extensions Allowed

> Not part of the initial scope, but can be considered without compromising the project:

*   Save recent questions and answers only on the server for aggregated statistical analysis.
*   Offer a dark mode via simple CSS, adapted for e-readers.
*   Allow exporting the response as a PDF or ePub.

---

## ✅ Executive Summary

*   ✅ One question at a time, no history.
*   ✅ Purely HTML interface, compatible with Kindle.
*   ✅ All processing on the backend.
*   ✅ No login, no session, no personal data.
*   ✅ Focus on lightness, simplicity, and accessibility.





